from collections import deque

def solve_puzzle(start):
    goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    queue = deque([(start, start.index(0), [])])
    visited = set()

    while queue:
        board, empty, path = queue.popleft()
        if board == goal: return path + [board]
        visited.add(tuple(board))
        x, y = divmod(empty, 3)
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                nempty = nx * 3 + ny
                nboard = board[:]
                nboard[empty], nboard[nempty] = nboard[nempty], nboard[empty]
                if tuple(nboard) not in visited:
                    queue.append((nboard, nempty, path + [board]))

# Example usage
solution = solve_puzzle([1, 2, 3, 4, 0, 5, 7, 8, 6])
print("\n".join(map(str, solution)))
